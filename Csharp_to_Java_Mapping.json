{
    "System": {
        "body": "System",
        "head": ""
    },

    "Console": {
        "body": "out",
        "head": ""
    },

    "Main": {
        "body": "main(String[] args)",
        "head": ""
    },

    "WriteLine": {
        "body": "println",
        "head": ""
    },

    "public": {
        "body": "public",
        "head": ""
    },

    "private": {
        "body": "private",
        "head": ""
    },

    "protected": {
        "body": "protected",
        "head": ""
    },

    "internal": {
        "body": "public",
        "head": ""
    },

    "protected internal": {
        "body": "protected",
        "head": ""
    },

    "private protected": {
        "body": "",
        "head": ""
    },

    "bool": {
        "body": "boolean",
        "head": ""
    },

    "byte": {
        "body": "short",
        "head": ""
    },

    "char": {
        "body": "char",
        "head": ""
    },

    "decimal": {
        "body": "decimal",
        "head": ""
    },

    "double": {
        "body": "double",
        "head": ""
    },

    "float": {
        "body": "float",
        "head": ""
    },

    "int": {
        "body": "int",
        "head": ""
    },

    "long": {
        "body": "long",
        "head": ""
    },

    "sbyte": {
        "body": "byte",
        "head": ""
    },

    "short": {
        "body": "short",
        "head": ""
    },

    "uint": {
        "body": "long",
        "head": ""
    },
    //check
    "ulong": {
        "body": "BigInteger",
        "head": "import java.math.BigInteger;"
    },

    "ushort": {
        "body": "int",
        "head": ""
    },

    "Beep": {
        "body": "",
        "head": ""
    },

    "Clear": {
        "body": "flush",
        "head": ""
    },

    "MoveBufferArea": {
        "body": "",
        "head": ""
    },

    "OpenStandardError": {
        "body": "",
        "head": ""
    },

    "OpenStandardInput": {
        "body": "",
        "head": ""
    },

    "OpenStandardOutput": {
        "body": "",
        "head": ""
    },

    "Read": {
        "body": "scanner.next().charAt(0)",
        "head": "import java.util.Scanner;",
        "declarations": "Scanner scanner = new Scanner(System.in);"
    },

    "ReadKey": {
        "body": "",
        "head": ""
    },

    "ReadLine": {
        "body": "scanner.nextLine()",
        "head": "import java.util.Scanner;",
        "declarations": "Scanner scanner = new Scanner(System.in);"
    },

    "ResetColor": {
        "body": "",
        "head": ""
    },

    "SetBufferSize": {
        "body": "",
        "head": ""
    },

    "SetCursorPosition": {
        "body": "",
        "head": ""
    },

    "SetError": {
        "body": "",
        "head": ""
    },


    "SetIn": {
        "body": "",
        "head": ""
    },

    "SetOut": {
        "body": "",
        "head": ""
    },

    "SetWindowsPosition": {
        "body": "",
        "head": ""
    },

    "SetWindowsSize": {
        "body": "",
        "head": ""
    },

    "Write": {
        "body": "print",
        "head": ""
    },

    //array declarations: none because they are functionally identical for basic arrays

    //Abstract Methods: Identical syntax

    //Anonymous Inner Classes: Generally outside scope

    //Collection Initializers

    //Lists
    "List": {
        "body": "ArrayList",
        "Head": "import java.util.*;"
    },

    "<int>": {
        "body": "<Integer>",
        "head": ""
    },

    //Dictionary
    "Dictionary": {
        "body": "HashMap",
        "head": "import java.util.*;"
    },

    //Collections

    //ArrayList/Lists
    "Insert": {
        "body": "add",
        "head": ""
    },

    //HashMaps/Dictionaries
    "Count": {
        "body": "size()",
        "head": ""
    },

    "Remove": {
        "body": "remove",
        "head": ""
    },

    "[]": {
        "body": "()",
        "head": ""
    },

    //Constants, fields, and Local Viriables

    //Inferred Types: var is identical

    //Read-Only Field
    "readonly": {
        "body": "final",
        "head": ""
    },

    //Constructors & Finalizers: outside our system so far

    //Enums: C# doesn't have the same types of Enums aside from simple ones

    //Event Handling: Excedingly complex for our scheme

    //Extension Methods: Outside Scheme

    //for each loop
    "foreach": {
        "body": "for"
    },

    "in": {
        "body": ":"
    },

    //Functional Interfaces/Delegates
    "delegate": {
        "body": "interface"
    },

    //generics: outside basic scheme

    //Import/Using
    "using": {
        "body": "import"
    },

    //Indexers: outside scope

    //Inheritance

    ":": {
        "body": "extends"
    },

    "override": {
        "body": "@Override"
    },

    "sealed": {
        "body": "final"
    },

    //Interfaces: outside scheme

    //Lambdas: only real difference is => vs -> but scheming that would be a bad idea

    //Operator Overloading: outside scheme

    //Optional Operators: not possible in java

    //Packages and Namespaces
    "Namespace": {
        "body": "package"
    },

    //parameter Arrays: outside scheme

    //Properties: outside scheme

    //ref Parameters: outside scheme

    //Static Constructors: essentially identical

    //lock and synchronized
    "lock": {
        "body": "synchronized"
    },

    //Type Discovery
    "is": {
        "body": "instanceof"
    },

    //using/try with resources: cannot do both in our scheme

    //multiline strings: outside scheme 

}
